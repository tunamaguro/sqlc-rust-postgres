//! Code generated by sqlc. SHOULD NOT EDIT.
//! sqlc version: v1.28.0
//! sqlc-rust-postgres version: v0.1.4
pub const COUNT_PILOTS: &str = r#"-- name: CountPilots :one
SELECT COUNT(*) FROM pilots"#;
#[derive(Debug, Clone)]
pub struct CountPilotsRow {
    pub count: i64,
}
impl CountPilotsRow {
    pub(crate) fn from_row(row: &postgres::Row) -> Result<Self, postgres::Error> {
        Ok(CountPilotsRow {
            count: row.try_get(0)?,
        })
    }
}
pub fn count_pilots(
    client: &mut impl postgres::GenericClient,
) -> Result<Option<CountPilotsRow>, postgres::Error> {
    let row = client.query_opt(COUNT_PILOTS, &[])?;
    match row {
        Some(ref row) => Ok(Some(CountPilotsRow::from_row(row)?)),
        None => Ok(None),
    }
}
pub const LIST_PILOTS: &str = r#"-- name: ListPilots :many
SELECT id, name FROM pilots LIMIT 5"#;
#[derive(Debug, Clone)]
pub struct ListPilotsRow {
    pub id: i32,
    pub name: String,
}
impl ListPilotsRow {
    pub(crate) fn from_row(row: &postgres::Row) -> Result<Self, postgres::Error> {
        Ok(ListPilotsRow {
            id: row.try_get(0)?,
            name: row.try_get(1)?,
        })
    }
}
pub fn list_pilots(
    client: &mut impl postgres::GenericClient,
) -> Result<impl Iterator<Item = Result<ListPilotsRow, postgres::Error>>, postgres::Error> {
    let rows = client.query(LIST_PILOTS, &[])?;
    Ok(rows.into_iter().map(|r| ListPilotsRow::from_row(&r)))
}
pub const DELETE_PILOT: &str = r#"-- name: DeletePilot :exec
DELETE FROM pilots WHERE id = $1"#;
pub fn delete_pilot(
    client: &mut impl postgres::GenericClient,
    id: i32,
) -> Result<u64, postgres::Error> {
    client.execute(DELETE_PILOT, &[&id])
}
#[derive(Debug)]
pub struct DeletePilot {
    pub id: i32,
}
impl DeletePilot {
    pub const QUERY: &'static str = r#"-- name: DeletePilot :exec
DELETE FROM pilots WHERE id = $1"#;
}
impl DeletePilot {
    pub async fn execute(
        &self,
        client: &mut impl postgres::GenericClient,
    ) -> Result<u64, postgres::Error> {
        client.execute(Self::QUERY, &[&self.id])
    }
}
#[derive(Debug, Default)]
pub struct DeletePilotBuilder {
    id: Option<i32>,
}
impl DeletePilot {
    pub fn builder() -> DeletePilotBuilder {
        DeletePilotBuilder::default()
    }
}
impl DeletePilotBuilder {
    pub fn id(mut self, id: i32) -> Self {
        self.id = Some(id);
        self
    }
    pub fn build(self) -> DeletePilot {
        DeletePilot {
            id: self.id.expect("Missing required field"),
        }
    }
}
